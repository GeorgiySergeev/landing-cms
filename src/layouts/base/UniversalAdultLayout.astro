---
import SocialShareButtons from '../../components/SocialShareButtons.tsx';
import OrderForm from '../../components/OrderForm.tsx';

// Define interface for props
export interface Props {
  title?: string;
  description?: string;
  country?: string;
  language?: string;
  isRTL?: boolean;
  themeColor?: string;
  productName?: string;
  productPrice?: string;
  discountPercent?: string;
  oldPrice?: string;
  currency?: string;
  tags?: string[];
}

// Get props with defaults
const {
  title = null,
  description = '',
  country = 'iq',
  language = 'ar',
  tags = [],
  isRTL = false, // Automatically determined based on language below, but can be overridden
  themeColor = 'light',
  productName = 'PRODUCT_NAME',
  productPrice = 'PRODUCT_PRICE',
  discountPercent = 'DISCOUNT_PERCENT',
  oldPrice = 'OLD_PRICE',
  currency = 'CURRENCY',
} = Astro.props;

// Determine RTL languages
const rtlLanguages = ['ar', 'he', 'fa', 'ur', 'sd', 'ps', 'ku'];

// Set direction based on language if not explicitly provided
const dir = isRTL || rtlLanguages.includes(language) ? 'rtl' : 'ltr';

// Choose appropriate font family based on direction
const fontFamily =
  dir === 'rtl'
    ? "'Amiri', 'Noto Sans Arabic', serif" // RTL font
    : "'Roboto', 'Noto Sans', sans-serif"; // LTR font

// Country name mapping for display in header
const countryNames: Record<string, string> = {
  us: 'United States',
  ng: 'Nigeria',
  iq: 'Iraq',
  ae: 'UAE',
  sa: 'Saudi Arabia',
  eg: 'Egypt',
  bd: 'Bangladesh',
  in: 'India',
};

// Get country name for display
const countryName =
  countryNames[country.toLowerCase()] || country.toUpperCase();

// Format current date
const currentDate = new Date();
const formattedDate = new Intl.DateTimeFormat(language, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}).format(currentDate);
---

<!doctype html>
<html lang={language} dir={dir} class={themeColor}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Preconnect to Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Load appropriate fonts based on direction -->
    {
      dir === 'rtl' ? (
        <link
          href="https://fonts.googleapis.com/css2?family=Amiri:wght@400;700&family=Noto+Sans+Arabic:wght@400;500;700&display=swap"
          rel="stylesheet"
        />
      ) : (
        <link
          href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Noto+Sans:wght@400;500;700&display=swap"
          rel="stylesheet"
        />
      )
    }

    <!-- Import external styles -->
    <link rel="stylesheet" href="/src/styles/variables.css" />
    <!-- <link rel="stylesheet" href="/src/styles/universal-layout.css" /> -->
    <!-- <link rel="stylesheet" href="/src/styles/responsive-header.css" /> -->
    <link rel="stylesheet" href="/src/styles/base-copy.css" />

    <!-- Dynamic styles with variables -->
    <style define:vars={{ fontFamily }}>
      /* Dynamic font family based on language/direction */
      body {
        font-family: var(--fontFamily);
      }
    </style>
  </head>
  <body>
    <div class="page__wrapper">
      <!-- Header -->
      <header class="header">
        <div class="container">
          <div class="header__inner">
            <div class="header__logo">
              <img
                class="header__country-flag"
                src={`/images/flags/${country.toLowerCase()}.svg`}
                alt={countryName}
                onerror="this.src='/images/flags/placeholder.svg'; this.onerror=null;"
              />
              <a class="logo" data-toggle="scroll" href="#form">
                NEWS <span>NG</span></a
              >
              <a data-toggle="scroll" href="#form" class="spec">Society</a>
              <!-- <div class="header__country-name">
                {countryName}
                <a href="#" class="header__country-name-link">Sosiaty</a>
              </div> -->
            </div>

            <nav class="header__nav" id="header-nav">
              <ul class="header__nav-list">
                <li class="header__nav-item"><a href="#">News</a></li>
                <li class="header__nav-item"><a href="#">Society</a></li>
                <li class="header__nav-item"><a href="#">Video</a></li>
                <li class="header__nav-item"><a href="#">Live</a></li>
              </ul>
            </nav>
            <a data-toggle="scroll" href="#form" class="header__menu-link"></a>
            <div class="search">
              <form action="#" class="search__form">
                <input
                  class="search__text"
                  type="text"
                  name="q"
                  value=""
                  placeholder="поиск"
                />
                <input class="search__submit" type="submit" value="" />
              </form>
            </div>
          </div>
        </div>
      </header>

      <!-- Main Content -->
      <main class="main__content">
        <section>
          <div class="container content">
            <div class="article">
              <div class="article__date">{formattedDate}</div>
              <!-- <h1 class="article-title">{title}</h1> -->

              <!--! Main content from MDX will be inserted here -->
              <slot />
            </div>
          </div>
        </section>

        <!-- Order Form -->
        <section class="order__form-section">
          <OrderForm
            productName={productName}
            productPrice={productPrice}
            discountPercent={discountPercent}
            oldPrice={oldPrice}
            currency={currency}
            language={language}
            country={country}
            formId="order_form"
            submitUrl="#"
            client:load
          />
        </section>
      </main>
      <!-- Footer -->
      <footer class="footer">
        <div class="container footer__inner footer__inner_top">
          {
            tags.length > 0 && (
              <div class="footer__tags-container">
                <span class="footer__tags-label">Topics:</span>
                <ul class="footer__tags-list">
                  {tags.map((tag: string) => (
                    <li class="footer__tag-item">
                      <a
                        href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                      >
                        {' '}
                        # {tag}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )
          }
          <p class="footer__social-label">NG news on social networks:</p>
          <!-- Social share buttons -->
          <SocialShareButtons title={title || undefined} client:load />
        </div>
      </footer>
    </div>
    <!-- Simple client-side script for basic functionality -->
    <script>
      // Smooth scroll to order form
      document.addEventListener('DOMContentLoaded', function () {
        const scrollLinks = document.querySelectorAll('a[href^="#"]');

        scrollLinks.forEach(link => {
          link.addEventListener(
            'click',
            function (this: HTMLAnchorElement, e: Event) {
              e.preventDefault();

              const targetId = this.getAttribute('href')?.substring(1);
              if (targetId) {
                const targetElement = document.getElementById(targetId);

                if (targetElement) {
                  window.scrollTo({
                    top: targetElement.offsetTop - 70,
                    behavior: 'smooth',
                  });
                }
              }
            }
          );
        });

        // Burger menu functionality
        const burgerMenu = document.getElementById('burger-menu');
        const headerNav = document.getElementById('header-nav');

        if (burgerMenu && headerNav) {
          burgerMenu.addEventListener('click', function () {
            burgerMenu.classList.toggle('active');
            headerNav.classList.toggle('active');
            document.body.classList.toggle('menu-open');
          });

          // Close menu when clicking nav links
          const navLinks = headerNav.querySelectorAll('a');
          navLinks.forEach(link => {
            link.addEventListener('click', function () {
              burgerMenu.classList.remove('active');
              headerNav.classList.remove('active');
              document.body.classList.remove('menu-open');
            });
          });

          // Close menu when clicking outside
          document.addEventListener('click', function (e) {
            if (
              !burgerMenu.contains(e.target as Node) &&
              !headerNav.contains(e.target as Node)
            ) {
              burgerMenu.classList.remove('active');
              headerNav.classList.remove('active');
              document.body.classList.remove('menu-open');
            }
          });
        }
      });
    </script>
  </body>
</html>
