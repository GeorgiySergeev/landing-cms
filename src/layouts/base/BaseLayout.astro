---
// Base layout that will be extended by specific layouts
const { 
  title = "Landing Page", 
  lang = "en",
  dir = "ltr",
  country = "us",
  description = "Landing page for your product or service",
  themeColor = "default",
  ogImage = "/images/og-image.jpg",
  canonicalUrl
  
} = Astro.props;

// Import base CSS first - this should apply to all layouts
import '../styles/base.css';
// Import theme script to ensure theme functionality is available
import '../../scripts/theme.ts';

// Conditionally import theme-specific CSS
const importThemeStyles = () => {
  switch(themeColor) {
    case 'arabic':
      return import('../styles/arabic.css');
    case 'chinese':
      return import('../styles/chinese.css');
    case 'german':
      return import('../styles/german.css');
    case 'bn-bd-adult':
      return import('../styles/bn-bd-adult.css');
    default:
      return import('../styles/default.css');
  }
};

await importThemeStyles();

// Generate canonical URL
const currentUrl = Astro.url.toString();
const canonicalLink = canonicalUrl || currentUrl;
---

<!DOCTYPE html>
<html lang={lang} dir={dir} class="no-js">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0" />
    <meta name="description" content={description} />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    
    <!-- Inline script for immediate theme application to prevent flashing -->
    <script is:inline>
      (function() {
        // Get the saved theme or detect system preference
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        // Apply appropriate theme class immediately
        if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
          document.documentElement.classList.add('dark');
        } else if (savedTheme === 'light') {
          document.documentElement.classList.add('light');
        }
        
        // Log theme detection for debugging
        console.log('Early theme detection:', {
          savedTheme,
          prefersDark,
          appliedClass: document.documentElement.className
        });
      })();
    </script>
    
    <!-- Подключаем theme.js напрямую для доступности функций toggleTheme и initializeTheme -->
    <script is:inline src="/theme.js"></script>
    
    <!-- Preconnect to critical domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- SEO tags -->
    <title>{title}</title>
    <link rel="canonical" href={canonicalLink} />
    
    <!-- Open Graph / Social Media Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={currentUrl} />
    <meta property="og:image" content={ogImage} />
    
    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    
    <!-- Critical CSS Inlining -->
    <style is:inline>
      /* Critical above-the-fold styles to prevent layout shift */
      :root {
        --color-primary: #2563eb;
        --color-secondary: #4b5563;
        --color-accent: #f59e0b;
        --color-text: #1f2937;
        --color-background: #ffffff;
        --spacing-unit: 8px;
        --section-padding: 2rem;
        --container-width: 1200px;
      }
      
      .js body {
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      
      .no-js .js-only {
        display: none;
      }
      
      /* Base critical styles */
      body {
        min-height: 100vh;
        /* font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; */
        color: var(--color-text);
        background-color: var(--color-background);
        line-height: 1.5;
      }
      
      .container {
        width: 100%;
        max-width: var(--container-width);
        margin-left: auto;
        margin-right: auto;
        padding-left: calc(var(--spacing-unit) * 2);
        padding-right: calc(var(--spacing-unit) * 2);
      }
      
      /* Critical performance optimization to avoid layout shift */
      img, picture, video, canvas {
        display: block;
        max-width: 100%;
        height: auto;
      }
    </style>
    
    <!-- Global styles - non render blocking -->
    <link rel="stylesheet" href="/base-styles.css" media="print" onload="this.media='all'" />
    <noscript><link rel="stylesheet" href="/base-styles.css" /></noscript>
    
    <!-- Template-specific styles (if any) -->
    {Astro.url.pathname.includes('/templates/') && <link rel="stylesheet" href="./style.css" media="print" onload="this.media='all'" />}
    {Astro.url.pathname.includes('/templates/') && <noscript><link rel="stylesheet" href="./style.css" /></noscript>}
    
    <!-- JavaScript modernizr detection -->
    <script is:inline>
      document.documentElement.classList.replace('no-js', 'js');
    </script>
    
    <slot name="head" />
  </head>
  <body class={`theme-${themeColor}`}>
    <!-- Skip to content link for accessibility -->
    <a href="/" class="skip-link">Skip to content</a>
    
    <header class="site-header">
      <p>BASE LAYOUT</p>
      <slot name="header">
       
        <!-- Default header content if none provided -->
        <div class="container flex justify-between items-center py-4">
          <div class="logo">
            <a href="/">
              <img src={`/images/flags/${country}.svg`} alt="Logo" width="120" height="40" loading="eager" />
            </a>
          </div>
          <nav class="main-nav">
            <slot name="navigation" />
          </nav>
        </div>
      </slot>
    </header>
    
    <main id="main-content" class="site-main">
      <slot />
    </main>
    
    <footer class="site-footer">
      <slot name="footer">
        <!-- Default footer content if none provided -->
        <div class="container py-6">
          <div class="flex flex-col md:flex-row justify-between items-center">
            <div class="copyright mb-4 md:mb-0">
              &copy; {new Date().getFullYear()} Your Company. All rights reserved.
            </div>
            <div class="footer-links">
              <a href="/privacy" class="mr-4">Privacy Policy</a>
              <a href="/terms">Terms of Service</a>
            </div>
          </div>
        </div>
      </slot>
    </footer>
    
    <!-- Placeholder for dynamic data that will be replaced by proxy -->
    <script id="dynamic-data" type="application/json">{dynamic_data}</script>
    
    <!-- Core functionality script (deferred for performance) -->
    <script>
      // Wait for DOM to be ready
      document.addEventListener('DOMContentLoaded', function() {
        // Parse dynamic data
        const data = JSON.parse(document.getElementById('dynamic-data')?.textContent?.replace('{dynamic_data}', '{}') || '{}');
        
        // Show body content when ready
        document.body.style.opacity = '1';
        
        // Initialize theme (with a more robust check)
        if (typeof window !== 'undefined' && typeof window.initializeTheme === 'function') {
          window.initializeTheme();
        }
        
        // Use data to update the page dynamically
        console.log('Dynamic data loaded:', data);
        
        // Lazy load images that aren't already using browser's lazy loading
        if ('IntersectionObserver' in window) {
          const lazyImages = document.querySelectorAll('img:not([loading])');
          
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target as HTMLImageElement;
                const src = img.getAttribute('data-src');
                
                if (src) {
                  img.src = src;
                  img.removeAttribute('data-src');
                }
                
                imageObserver.unobserve(img);
              }
            });
          });
          
          lazyImages.forEach(img => {
            imageObserver.observe(img);
          });
        }
      });
      
      // Performance monitoring
      if (window.performance && 'function' === typeof window.performance.mark) {
        window.performance.mark('fully_loaded');
      }
    </script>
    
    <slot name="scripts" />
    
    <!-- Analytics placeholder (to be replaced by actual implementation) -->
    <script is:inline>
      // Analytics code will be inserted here by build process
      console.log('Analytics loaded');
    </script>
  </body>
</html> 